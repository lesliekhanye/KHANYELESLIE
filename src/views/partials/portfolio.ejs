<style>
  .portfolio-section {
    padding: 4rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  .portfolio-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }
  .portfolio-item {
    background: linear-gradient(to bottom right, #ffffff, #f0f0f0);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
  }
  .portfolio-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
  }
  .portfolio-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  .portfolio-content {
    padding: 1.5rem;
    background: white;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  .portfolio-languages {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.75rem;
  }
  .language-tag {
    background: rgba(0, 102, 204, 0.1);
    color: #0066cc;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  .portfolio-description {
    margin-top: 0.75rem;
    color: #4a4a4a;
    display: -webkit-box;
    -webkit-line-clamp: 5;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
  }
  h2 {
    font-size: 2.5rem;
    font-weight: bold;
    text-align: center;
    margin-bottom: 2rem;
    color: #ffffff;
  }
  h3 {
    color: #000000;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  .learn-more-btn {
    display: inline-block;
    background-color: #0066cc;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 500;
    margin-top: auto;
    align-self: flex-start;
    transition: background-color 0.3s ease;
  }
  .learn-more-btn:hover {
    background-color: #0052a3;
  }

  /* Loading overlay styles */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 20px;
  }

  .loading-message {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    padding: 2.5rem;
    border-radius: 16px;
    box-shadow: 
      0 4px 6px rgba(0, 0, 0, 0.1),
      0 1px 3px rgba(0, 0, 0, 0.08),
      inset 0 0 0 1px rgba(255, 255, 255, 0.5);
    max-width: 400px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    transform: translateY(-20px);
    animation: slideIn 0.3s ease forwards;
  }

  .loading-message p {
    margin: 1rem 0 0 0;
    color: #1a1a1a;
    font-size: 1rem;
    line-height: 1.6;
    text-align: center;
    font-weight: 500;
  }

  .spinner {
    border: 3px solid rgba(0, 102, 204, 0.1);
    border-top: 3px solid #0066cc;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
    box-shadow: 0 0 10px rgba(0, 102, 204, 0.2);
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Add media query for better mobile experience */
  @media (max-width: 768px) {
    .loading-message {
      padding: 2rem;
      margin: 1rem;
      max-width: calc(100% - 2rem);
    }
    
    .loading-message p {
      font-size: 0.95rem;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
    }
  }
</style>

<section class="portfolio-section">
  <h2>Portfolio</h2>
  <div class="portfolio-grid" id="portfolioGrid"></div>
</section>

<script>
  // Function to remove any existing overlay
  function removeExistingOverlay() {
    const existingOverlay = document.querySelector('.loading-overlay');
    if (existingOverlay) {
      existingOverlay.remove();
    }
  }

  // Remove overlay when page loads and when user navigates back
  document.addEventListener('DOMContentLoaded', removeExistingOverlay);
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      removeExistingOverlay();
    }
  });

  function showLoadingMessage() {
    removeExistingOverlay();
    const overlay = document.createElement('div');
    overlay.className = 'loading-overlay';
    overlay.innerHTML = `
      <div class="loading-message">
        <div class="spinner"></div>
        <p>Please note that some of these projects are hosted on Render free plan, so they will take some time to boot up. Please be patient :)</p>
      </div>
    `;
    document.body.appendChild(overlay);
    return overlay;
  }

  function showLoader(button, targetUrl) {
    const overlay = showLoadingMessage();
    
    // Add event listener to remove overlay when leaving the page
    window.addEventListener('beforeunload', removeExistingOverlay, { once: true });
    
    // Create a hidden iframe to check when the target page is loaded
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);

    iframe.onload = () => {
      document.body.removeChild(iframe);
      window.location.href = targetUrl;
    };

    iframe.onerror = () => {
      document.body.removeChild(iframe);
      window.location.href = targetUrl;
    };

    iframe.src = targetUrl;

    // Set a maximum waiting time
    setTimeout(() => {
      if (document.body.contains(iframe)) {
        document.body.removeChild(iframe);
        window.location.href = targetUrl;
      }
    }, 30000);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const portfolioGrid = document.getElementById("portfolioGrid");
    const portfolioDataUrl = "/data/portfolio-data.json";

    fetch(portfolioDataUrl)
      .then((response) => response.json())
      .then((data) => {
        data.projects.forEach((project) => {
          const portfolioItem = document.createElement("div");
          portfolioItem.className = "portfolio-item";
          const portfolioContent = `
            <img src="${project.image}" alt="${project.title}" class="portfolio-image">
            <div class="portfolio-content">
              <h3 >${project.title}</h3>
              <div class="portfolio-languages">
                ${project.languages
                  .map((lang) => `<span class="language-tag">${lang}</span>`)
                  .join("")}
              </div>
              <p class="portfolio-description">${project.description}</p>
              <a href="${project.link}" class="learn-more-btn" onclick="event.preventDefault(); showLoader(this, '${project.link}');">Learn More</a>
            </div>
          `;
          portfolioItem.innerHTML = portfolioContent;
          portfolioGrid.appendChild(portfolioItem);
        });
      })
      .catch((error) => console.error("Error loading portfolio data:", error));
  });
</script>>